######  Set up Source - Replica using Percona XtraBackup  ######

We will replicate two schemas gesti and demo_db


Percona XtraBackup needs to be installed on both servers.

Note
It is not recommended to mix MySQL variants (Percona Server, MySQL) in your replication setup. This may produce incorrect xtrabackup_slave_info file when adding a new replica.


#### Source ####

A system with a MySQL-based server installed, configured and running. This system will be called Source, as it is where your data is stored and the one to be replicated. We will assume the following about this system:

 - the MySQL server is able to communicate with others by the standard TCP/IP port;

 - the SSH server is installed and configured;

 - you have a user account in the system with the appropriate permissions;

 - you have a MySQL’s user account with appropriate privileges.

 - server has binlogs enabled and server-id set up to 1.
 

The user where the replica will connect to the source

USE mysql; 
CREATE USER `replication`@`xxx.xxx.xxx.xxx` IDENTIFIED WITH caching_sha2_password BY '1R*cs1GeWk*X{5#sS4}';
GRANT REPLICATION SLAVE ON *.* TO `replication`@`xxx.xxx.xxx.xxx`;
FLUSH PRIVILEGES; 
 
 
In the  /etc/mysql/mysql.conf.d/mysqld.conf 
 
[mysqld] 
server-id		            = 1
log_bin			            = /var/log/mysql/mysql-bin.log
binlog_expire_logs_seconds	= 432000 #5 days
max_binlog_size             = 100M
binlog_format               = MIXED 
 

#### Replica ####

Another system, with a MySQL-based server installed on it.

[mysqld]
server-id		            = 2
#log_bin                    = /var/log/mysql/mysql-bin.log
skip-log-bin
replicate_do_db             = gesti
replicate_do_db             = demo_db



Step 1. Make a backup on the Source and prepare it

I have created /etc/mysql/mysql.conf.d/backup.cnf with the following data 

[client]
user=backup
password="H4p#km997l8bWXGA.?lf"

And a backup user with proper grants

CREATE USER `backup`@`localhost` IDENTIFIED WITH caching_sha2_password BY  'H4p#km997l8bWXGA.?lf';
GRANT SELECT, INSERT, CREATE, RELOAD, PROCESS, SUPER, LOCK TABLES, REPLICATION CLIENT, CREATE TABLESPACE ON *.* TO `backup`@`localhost`;
GRANT BACKUP_ADMIN ON *.* TO `backup`@`localhost`;



At the Source, issue the following to a shell:

 - Use the --databases to back up a database :
 xtrabackup --databases=”db1 db2 test_db demo_db”

 - Use the --tables or --tables-file options to back up a table .


e.basha@dbmasterpronto:~$ sudo xtrabackup  --defaults-file=/etc/mysql/mysql.conf.d/backup.cnf --backup --databases="demo_db gesti" --target-dir=/data/backups/

2024-05-08T10:31:57.801869+02:00 0 [Note] [MY-011825] [Xtrabackup] recognized client arguments: --user=backup --password=* --backup=1 --databases=demo_db gesti --target-dir=/data/backups/
xtrabackup version 8.0.35-30 based on MySQL server 8.0.35 Linux (x86_64) (revision id: 6beb4b49)
.
.
.
.
2024-05-08T10:32:12.206879+02:00 0 [Note] [MY-011825] [Xtrabackup] Done: Writing file /data/backups/xtrabackup_info
2024-05-08T10:32:13.254522+02:00 0 [Note] [MY-011825] [Xtrabackup] Transaction log of lsn (1252376849278) to (1252387464757) was copied.
2024-05-08T10:32:13.475067+02:00 0 [Note] [MY-011825] [Xtrabackup] completed OK!


This will make a copy of your MySQL data dir to the /path/to/backupdir directory. You have told Percona XtraBackup to connect to the database server using your database user and password, and do a hot backup of all your data in it (all MyISAM, InnoDB tables and indexes in them).

In order for snapshot to be consistent you need to prepare the data on the source:

e.basha@dbmasterpronto:~$ sudo xtrabackup --prepare --export --target-dir=/data/backups
.
.
.
.

2024-05-08T10:34:27.582817+02:00 0 [Note] [MY-012980] [InnoDB] Shutdown completed; log sequence number 1252387465548
2024-05-08T10:34:27.590178+02:00 0 [Note] [MY-011825] [Xtrabackup] completed OK!


We need to take the structure of the tables of both schemmas

e.basha@dbmasterpronto:~$ sudo mysqldump -u root -p --no-data --databases  gesti demo_db > no_data.sql
Enter password:
e.basha@dbmasterpronto:~$ sudo ls -lsa | grep no_data.sql
112 -rw-rw-r--  1 e.basha e.basha 113661 May  8 14:41 no_data.sql


Step 2. Copy backed up data to the Replica

On the Source, use rsync or scp to copy the data from the Source to the Replica. ( If you are syncing the data directly to replica’s data directory (var/lib/mysql/), we recommend that you stop the mysqld there).


To prevent the error rsync: [generator] recv_generator: mkdir "" failed: Permission denied (13)

 { 
  e.basha@dbmasterpronto:~$ sudo ssh gesti@192.168.100.136
  gesti@gestitest:~$ pwd
  /home/gesti
  
  gesti@gestitest:~$ mkdir backups
  gesti@gestitest:~$ exit
 }
 

e.basha@dbmasterpronto:~$ sudo rsync -avpP -e ssh /data/backups gesti@192.168.100.136:/home/gesti/backups
e.basha@dbmasterpronto:~$ sudo rsync -avpP -e ssh /home/e.basha/no_data.sql gesti@192.168.100.136:/home/gesti/backups


On the replica


Restore the no_data.sql

gesti@gestitest:~$ sudo mysql -u root -p < /home/gesti/backups/no_data.sql

For every InnoDB table on both schemmas we need to discard tablespace , so we will create a procedure which accepts the database name as input and for every innodb table executes ALTER TABLE table_name DISCARD TABLESPACE;


DELIMITER //

CREATE PROCEDURE discard_innodb_tablespaces(IN db_name VARCHAR(255))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE tbl_name VARCHAR(255);
    DECLARE cur CURSOR FOR
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = db_name
        AND engine = 'InnoDB';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO tbl_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        SET @sql = CONCAT('ALTER TABLE `', db_name, '`.`', tbl_name, '` DISCARD TABLESPACE');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END LOOP;

    CLOSE cur;
END //

DELIMITER ;



Before calling the procedure ww will run the following statement 


mysql> SET FOREIGN_KEY_CHECKS=0;
mysql> CALL discard_innodb_tablespaces('gesti');
mysql> use demo_db;
mysql> SET FOREIGN_KEY_CHECKS=0;
mysql> CALL gesti.discard_innodb_tablespaces('demo_db');


We need to copy the backup made from xtrabackup to the mysql directory and give the permissions 

gesti@gestitest:~$ sudo cp /home/gesti/backups/backups/gesti/* /var/lib/mysql/gesti
gesti@gestitest:~$ sudo cp /home/gesti/backups/backups/demo_db/* /var/lib/mysql/demo_db
gesti@gestitest:~$ sudo chown -R mysql:mysql /var/lib/mysql/gesti/
gesti@gestitest:~$ sudo chown -R mysql:mysql /var/lib/mysql/demo_db/


The final step we need to import the tablespace, we will create another procedure 

DELIMITER //

CREATE PROCEDURE import_innodb_tablespaces(IN db_name VARCHAR(255))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE tbl_name VARCHAR(255);
    DECLARE cur CURSOR FOR
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = db_name
        AND engine = 'InnoDB';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO tbl_name;
        IF done THEN
            LEAVE read_loop;
        END IF;

        SET @sql = CONCAT('ALTER TABLE `', db_name, '`.`', tbl_name, '` IMPORT TABLESPACE');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;
    END LOOP;

    CLOSE cur;
END //

DELIMITER ;


mysql> CALL import_innodb_tablespaces('gesti');

mysql> use demo_db;
mysql> call gesti.import_innodb_tablespaces('demo_db');
mysql> SET FOREIGN_KEY_CHECKS=1;



Step 3. Start the replication


gesti@gestitest:~$ sudo cat /home/gesti/backups/backups/xtrabackup_binlog_info
mysql-bin.000175        157


mysql> CHANGE REPLICATION SOURCE TO
       SOURCE_HOST='192.168.xxx.xxx',
       SOURCE_USER='replication',
       SOURCE_PASSWORD='1R*cs1GeWk*X{5#sS4}',
       SOURCE_LOG_FILE='mysql-bin.000175',
       SOURCE_LOG_POS=157,
       GET_SOURCE_PUBLIC_KEY=1;

mysql> START REPLICA;

mysql> show replica status \G
*************************** 1. row ***************************
             Replica_IO_State: Waiting for source to send event
                  Source_Host: 192.168.xxx.xxx
                  Source_User: replication
                  Source_Port: 3306
                Connect_Retry: 60
              Source_Log_File: mysql-bin.000176
          Read_Source_Log_Pos: 73186958
               Relay_Log_File: gestitest-relay-bin.000004
                Relay_Log_Pos: 73187174
        Relay_Source_Log_File: mysql-bin.000176
           Replica_IO_Running: Yes
          Replica_SQL_Running: Yes
              Replicate_Do_DB: gesti,demo_db
          Replicate_Ignore_DB:
           Replicate_Do_Table:
       Replicate_Ignore_Table:
      Replicate_Wild_Do_Table:
  Replicate_Wild_Ignore_Table:
                   Last_Errno: 0
                   Last_Error:
                 Skip_Counter: 0
          Exec_Source_Log_Pos: 73186958
              Relay_Log_Space: 73187435
              Until_Condition: None
               Until_Log_File:
                Until_Log_Pos: 0
           Source_SSL_Allowed: No
           Source_SSL_CA_File:
           Source_SSL_CA_Path:
              Source_SSL_Cert:
            Source_SSL_Cipher:
               Source_SSL_Key:
        Seconds_Behind_Source: 0
Source_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error:
               Last_SQL_Errno: 0
               Last_SQL_Error:
  Replicate_Ignore_Server_Ids:
             Source_Server_Id: 1
                  Source_UUID: 963d43b8-0703-11ef-9a5a-005056b7b662
             Source_Info_File: mysql.slave_master_info
                    SQL_Delay: 0
          SQL_Remaining_Delay: NULL
    Replica_SQL_Running_State: Replica has read all relay log; waiting for more updates
           Source_Retry_Count: 86400
                  Source_Bind:
      Last_IO_Error_Timestamp:
     Last_SQL_Error_Timestamp:
               Source_SSL_Crl:
           Source_SSL_Crlpath:
           Retrieved_Gtid_Set:
            Executed_Gtid_Set:
                Auto_Position: 0
         Replicate_Rewrite_DB:
                 Channel_Name:
           Source_TLS_Version:
       Source_public_key_path:
        Get_Source_public_key: 1
            Network_Namespace:
1 row in set (0.00 sec)

